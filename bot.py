import sqlite3
import logging
import asyncio
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import TOKEN, ADMIN_CHAT_ID
import aiocron

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS homework (
                        id INTEGER PRIMARY KEY,
                        user_id INTEGER,
                        date TEXT,
                        group_number TEXT,
                        class TEXT,
                        school TEXT,
                        subject TEXT,
                        task TEXT)''')
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        class TEXT,
                        school TEXT,
                        group_number TEXT,
                        role TEXT DEFAULT 'viewer',
                        balance INTEGER DEFAULT 0,
                        referrer_id INTEGER DEFAULT NULL,
                        editor_request BOOLEAN DEFAULT FALSE)''')
        cur.execute('''CREATE TABLE IF NOT EXISTS schedule (
                        id INTEGER PRIMARY KEY,
                        user_id INTEGER,
                        class TEXT,
                        school TEXT,
                        schedule_json TEXT)''')
        cur.execute('''CREATE TABLE IF NOT EXISTS schools (
                        id INTEGER PRIMARY KEY,
                        name TEXT UNIQUE)''')
        conn.commit()
init_db()


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    waiting_for_school = State()
    waiting_for_class_number = State()
    waiting_for_class_letter = State()
    waiting_for_new_school = State()
    waiting_for_group = State()

class AdminState(StatesGroup):
    waiting_for_school_approval = State()

class AdminPanelState(StatesGroup):
    waiting_for_user_search = State()
    waiting_for_user_action = State()
    waiting_for_role_change = State()
    waiting_for_balance_change = State()

class HomeworkState(StatesGroup):
    waiting_for_date = State()
    waiting_for_subject = State()
    waiting_for_task = State()
    waiting_for_view_date = State()

class ScheduleState(StatesGroup):
    waiting_for_day = State()
    waiting_for_subject = State()


# –§–∏–ª—å—Ç—Ä—ã
@router.message(F.chat.type != "private")
async def handle_group_messages(message: types.Message):
    await message.answer("üö´ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª—Å.")

class IsBannedFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
            result = cur.fetchone()
            return result and result[0] == "ban"

class HasSchoolAndClassFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT school, class FROM users WHERE user_id = ?", (message.from_user.id,))
            result = cur.fetchone()
            
            if result and result[0] is not None and result[1] is not None:
                return True
            else:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —à–∫–æ–ª—É –∏ –∫–ª–∞—Å—Å.\n/start")
                return False

class IsEditorOrVipOrAdminFilter(BaseFilter):
    async def __call__(self, message: types.Message, bot: Bot) -> bool:
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
            result = cur.fetchone()
            
            if result and result[0] in ["editor", "vip", "admin"]:
                return True
            else:
                await message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    reply_markup=create_request_editor_keyboard()
                )
                return False

class IsAdminFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
            result = cur.fetchone()
            return result and result[0] == "admin"




# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_user_role(user_id):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
        result = cur.fetchone()
        return result[0] if result else None

async def is_editor_or_vip(user_id):
    role = await check_user_role(user_id)
    return role in ["editor", "vip", "admin"]

async def count_editors_in_class(user_class, user_school):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM users WHERE class = ? AND school = ? AND role = 'editor'", (user_class, user_school))
        result = cur.fetchone()
        return result[0] if result else 0

def find_next_lesson_date(user_class, user_school, subject, user_group=None):
    today = datetime.now()
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT schedule_json FROM schedule WHERE class = ? AND school = ?", (user_class, user_school))
        result = cur.fetchone()
        
        if result:
            schedule = json.loads(result[0])
            for i in range(1, 14):
                date = today + timedelta(days=i)
                day_of_week = date.strftime("%A")
                
                if day_of_week in schedule:
                    for s in schedule[day_of_week]:
                        if "/" in s:
                            s_parts = s.split("/")
                            if user_group and s_parts[int(user_group) - 1] == subject:
                                return date.strftime("%y %m %d")
                        elif s == subject:
                            return date.strftime("%y %m %d")
    return None

async def get_schedule(user_class, user_school):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT schedule_json FROM schedule WHERE class = ? AND school = ?", (user_class, user_school))
        result = cur.fetchone()
        if result:
            return json.loads(result[0])
        return None

async def update_schedule(user_class, user_school, schedule):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        schedule_json = json.dumps(schedule, ensure_ascii=False)
        cur.execute("SELECT id FROM schedule WHERE class = ? AND school = ?", (user_class, user_school))
        result = cur.fetchone()
        if result:
            cur.execute("UPDATE schedule SET schedule_json = ? WHERE class = ? AND school = ?", (schedule_json, user_class, user_school))
        else:
            cur.execute("INSERT INTO schedule (user_id, class, school, schedule_json) VALUES (?, ?, ?, ?)", 
                         (user_id, user_class, user_school, schedule_json))
        conn.commit()

async def update_schedule(user_id, user_class, user_school, schedule):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        schedule_json = json.dumps(schedule, ensure_ascii=False)
        cur.execute("SELECT id FROM schedule WHERE class = ? AND school = ?", (user_class, user_school))
        result = cur.fetchone()
        if result:
            cur.execute("UPDATE schedule SET schedule_json = ? WHERE class = ? AND school = ?", (schedule_json, user_class, user_school))
        else:
            cur.execute("INSERT INTO schedule (user_id, class, school, schedule_json) VALUES (?, ?, ?, ?)", 
                         (user_id, user_class, user_school, schedule_json))
        conn.commit()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    button_add_hw = KeyboardButton(text="/addhw")
    button_view_hw = KeyboardButton(text="/viewhw")
    button_view_schedule = KeyboardButton(text="/viewschedule")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [button_add_hw, button_view_hw],
            [button_view_schedule],
        ],
        resize_keyboard=True,
        selective=True,
    )
    return keyboard

def create_class_number_keyboard():
    builder = InlineKeyboardBuilder()
    for grade in range(1, 12):
        builder.button(text=f"{grade} –∫–ª–∞—Å—Å", callback_data=f"class_{grade}")
    builder.adjust(2)
    return builder.as_markup()

def create_class_letter_keyboard(grade):
    builder = InlineKeyboardBuilder()
    for letter in ['–ê', '–ë', '–í', '–ì', '–î']:
        builder.button(text=f"{grade} {letter}", callback_data=f"classn_{grade} {letter}")
    builder.adjust(2)
    return builder.as_markup()

def create_school_keyboard():
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT name FROM schools")
        schools = cur.fetchall()
    
    builder = InlineKeyboardBuilder()
    for school in schools:
        builder.button(text=school[0], callback_data=f"school_{school[0]}")
    
    builder.button(text="‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —à–∫–æ–ª—É", callback_data="new_school")
    builder.adjust(2)
    return builder.as_markup()

def create_school_approval_keyboard(user_id, school_name):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"approve_{user_id}_{school_name}")
    builder.button(text="‚ùå –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
    builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_")
    builder.adjust(2)
    return builder.as_markup()

def create_date_keyboard(user_class, user_school, include_next_lesson_button=True):
    today = datetime.now()
    builder = InlineKeyboardBuilder()

    special_dates = {
        "–°–µ–≥–æ–¥–Ω—è": today,
        "–ó–∞–≤—Ç—Ä–∞": today + timedelta(days=1),
        "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": today + timedelta(days=2),
    }
    for label, date in special_dates.items():
        if date.weekday() < 5:
            builder.button(text=label, callback_data=f"date_{date.strftime('%y %m %d')}")
    
    for i in range(3, 7):
        date = today + timedelta(days=i)
        if date.weekday() < 5:
            formatted_label = date.strftime("%a %d.%m").replace("Mon", "–ü–ù").replace("Tue", "–í–¢").replace("Wed", "–°–†").replace("Thu", "–ß–¢").replace("Fri", "–ü–¢")
            builder.button(text=formatted_label, callback_data=f"date_{date.strftime('%y %m %d')}")

    if include_next_lesson_button:
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data="next_lesson")
    
    builder.button(text="üìÖ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_date")
    builder.adjust(1)
    return builder.as_markup()

async def create_subject_keyboard(user_class, user_group=None, day=None, include_all_subjects=True):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT schedule_json FROM schedule WHERE class = ?", (user_class,))
        result = cur.fetchone()
        
        if result:
            schedule = json.loads(result[0])
            if day:
                subjects = schedule.get(day, [])
            else:
                subjects = set()
                for day_subjects in schedule.values():
                    subjects.update(day_subjects)
        else:
            subjects = []
    
    builder = InlineKeyboardBuilder()
    for subject in subjects:
        if "/" in subject:
            subject_parts = subject.split("/")
            if user_group:
                subject = subject_parts[int(user_group) - 1]
            else:
                continue
        builder.button(text=subject, callback_data=f"subject_{subject}")
    if include_all_subjects:
        builder.button(text="üìö –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="all_subjects")
    builder.button(text="‚ûï –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç", callback_data="new_subject")
    builder.adjust(2)
    return builder.as_markup()

def create_day_keyboard():
    builder = InlineKeyboardBuilder()
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    for day in days:
        builder.button(text=day, callback_data=f"day_{day}")
    builder.adjust(1)
    return builder.as_markup()

def create_admin_user_actions_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_changerole")
    builder.button(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_changebalance")
    builder.adjust(2)
    return builder.as_markup()

def create_role_selection_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üëÄ Viewer", callback_data="role_viewer")
    builder.button(text="‚úèÔ∏è Editor", callback_data="role_editor")
    builder.button(text="üõ°Ô∏è Admin", callback_data="role_admin")
    builder.button(text="üåü VIP", callback_data="role_vip")
    builder.button(text="üö´ Ban", callback_data="role_ban")
    builder.adjust(2)
    return builder.as_markup()

def create_request_editor_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", callback_data="request_editor")
    return builder.as_markup()

def create_group_selection_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ì—Ä—É–ø–ø–∞ 1", callback_data="group_1")
    builder.button(text="–ì—Ä—É–ø–ø–∞ 2", callback_data="group_2")
    builder.adjust(1)
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"), F.chat.type == "private", ~IsBannedFilter())
async def cmd_start(message: types.Message, state: FSMContext):
    referrer_id = None
    if len(message.text.split()) > 1:
        referrer_id = int(message.text.split()[1])
    
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT class, school FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cur.fetchone()
    
    if result:
        user_class, user_school = result
        if user_school is None:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —à–∫–æ–ª—É:", reply_markup=create_school_keyboard())
            await state.set_state(UserState.waiting_for_school)
            return
        
        if user_class is None:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å:", reply_markup=create_class_number_keyboard())
            await state.set_state(UserState.waiting_for_class_number)
            return
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∏–∑ {user_class} –∫–ª–∞—Å—Å–∞ —à–∫–æ–ª—ã {user_school}.\n\n"
            "üéí –ö–æ–º–∞–Ω–¥—ã:\n"
            "üìù /addhw ‚Äì –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É\n"
            "üìñ /viewhw ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫—É\n\n"
            "‚úèÔ∏è /editschedule ‚Äì –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "üìÖ /viewschedule ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
            "üìã /menu ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
            "üíñ /donate ‚Äì –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            reply_markup=create_main_keyboard()
        )
    else:
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("INSERT INTO users (user_id, username, referrer_id) VALUES (?, ?, ?)", 
                        (message.from_user.id, message.from_user.username, referrer_id))
            conn.commit()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —à–∫–æ–ª—É:", reply_markup=create_school_keyboard())
        await state.set_state(UserState.waiting_for_school)

@router.message(Command("addhw"), F.chat.type == "private", ~IsBannedFilter(), HasSchoolAndClassFilter(), IsEditorOrVipOrAdminFilter())
async def add_homework(message: types.Message, state: FSMContext):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT class, school FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cur.fetchone()
    
    if result:
        user_class, user_school = result
        await state.update_data(user_class=user_class, user_school=user_school)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=create_date_keyboard(user_class, user_school))
        await state.set_state(HomeworkState.waiting_for_date)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –∏ —à–∫–æ–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

@router.message(Command("viewhw"), F.chat.type == "private", ~IsBannedFilter(), HasSchoolAndClassFilter())
async def view_homework(message: types.Message, state: FSMContext):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT class, school FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cur.fetchone()
    
    if result:
        user_class, user_school = result
        await state.update_data(user_class=user_class, user_school=user_school)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=create_date_keyboard(user_class, user_school, include_next_lesson_button=False))
        await state.set_state(HomeworkState.waiting_for_view_date)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –∏ —à–∫–æ–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

@router.message(Command("editschedule"), F.chat.type == "private", ~IsBannedFilter(), HasSchoolAndClassFilter(), IsEditorOrVipOrAdminFilter())
async def edit_schedule(message: types.Message, state: FSMContext):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT class, school FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cur.fetchone()
    
    if result:
        user_class, user_school = result
        await state.update_data(user_class=user_class, user_school=user_school)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=create_day_keyboard())
        await state.set_state(ScheduleState.waiting_for_day)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –∏ —à–∫–æ–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

@router.message(Command("viewschedule"), F.chat.type == "private", ~IsBannedFilter(), HasSchoolAndClassFilter())
async def view_schedule(message: types.Message):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT class, school FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cur.fetchone()
    
    if result:
        user_class, user_school = result
        schedule = await get_schedule(user_class, user_school)
        
        if schedule:
            text = f"üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {user_class} –∫–ª–∞—Å—Å–∞ {user_school}:\n"
            for day, subjects in schedule.items():
                if subjects:
                    text += f"\n<b>{day}</b>\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º <b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    text += "\n".join([f"{i+1}. {subject}" for i, subject in enumerate(subjects)]) + "\n"
            await message.answer(text, parse_mode="HTML")  # –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode="HTML"
        else:
            await message.answer(f"–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {user_class} ({user_school}).\n–î–æ–±–∞–≤–∏—Ç—å: /editschedule")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –∏ —à–∫–æ–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

@router.message(Command("menu"), F.chat.type == "private", ~IsBannedFilter(), HasSchoolAndClassFilter())
async def cmd_menu(message: types.Message):
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT class, school, role, balance, referrer_id FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cur.fetchone()
    
    if result:
        user_class, user_school, role, balance, referrer_id = result
        ref_link = f"https://t.me/zmdiarybot?start={message.from_user.id}"
        menu_text = (
            f"üìã *–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n"
            f"üè´ *–®–∫–æ–ª–∞:* {user_school}\n"
            f"üéí *–ö–ª–∞—Å—Å:* {user_class}\n"
            f"üë§ *–†–æ–ª—å:* {role}\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} –±–∞–ª–ª–æ–≤\n"
            f"üîó *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞* (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n"
            f"`{ref_link}`\n\n"
            f"üíñ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:* `/donate`"
        )
        await message.answer(menu_text, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@router.message(Command("admin"), F.chat.type == "private", IsAdminFilter())
async def cmd_admin(message: types.Message, state: FSMContext):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminPanelState.waiting_for_user_search)

@router.message(Command("donate"), F.chat.type == "private", ~IsBannedFilter(), HasSchoolAndClassFilter())
async def cmd_donate(message: types.Message):
    donate_text = (
        "üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:\n\n"
        "–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ, "
        "–≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É:\n\n"
        f"üí≥ <code>2200 7019 1503 8563</code>\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè"
    )
    await message.answer(donate_text, parse_mode="HTML")

@router.message(Command("hide"), F.chat.type == "private", ~IsBannedFilter(), HasSchoolAndClassFilter())
async def cmd_hide(message: types.Message):
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())




# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
@aiocron.crontab('0 4 * * 6')
async def check_editors_activity():
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT user_id, class, school FROM users WHERE role = 'editor'")
        editors = cur.fetchall()
        
        for editor in editors:
            user_id, user_class, user_school = editor
            cur.execute("SELECT COUNT(*) FROM homework WHERE user_id = ? AND date >= date('now', '-7 days')", (user_id,))
            hw_count = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM users WHERE class = ? AND school = ? AND role = 'editor'", (user_class, user_school))
            editor_count = cur.fetchone()[0]
            if hw_count < 4 and editor_count > 3:
                cur.execute("UPDATE users SET role = 'viewer' WHERE user_id = ?", (user_id,))
                cur.execute("SELECT user_id FROM users WHERE class = ? AND school = ? AND editor_request = TRUE ORDER BY RANDOM() LIMIT 1", (user_class, user_school))
                new_editor = cur.fetchone()
                
                if new_editor:
                    new_editor_id = new_editor[0]
                    cur.execute("UPDATE users SET role = 'editor', editor_request = FALSE WHERE user_id = ?", (new_editor_id,))
                    await bot.send_message(new_editor_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.")
        conn.commit()





# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.callback_query(UserState.waiting_for_class_number, F.data.startswith("class_"))
async def process_class_number_selection(callback: types.CallbackQuery, state: FSMContext):
    grade = callback.data.split("_")[1]
    await state.update_data(grade=grade)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", reply_markup=create_class_letter_keyboard(grade))
    await state.set_state(UserState.waiting_for_class_letter)
    await callback.answer()

@router.callback_query(UserState.waiting_for_class_letter, F.data.startswith("classn_"))
async def process_class_letter_selection(callback: types.CallbackQuery, state: FSMContext):
    user_class = callback.data.split("_")[1]
    data = await state.get_data()
    school = data.get("school")
    
    await state.update_data(user_class=user_class)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç—Å—è –ø–æ –≥—Ä—É–ø–ø–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞):", reply_markup=create_group_selection_keyboard())
    await state.set_state(UserState.waiting_for_group)
    await callback.answer()


@router.callback_query(ScheduleState.waiting_for_day, F.data.startswith("day_"))
async def process_day_selection(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.split("_")[1]
    await state.update_data(day=day)
    data = await state.get_data()
    user_class = data.get("user_class")
    user_school = data.get("user_school")
    
    schedule = await get_schedule(user_class, user_school)
    text = f"üìÖ *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:*\n\n"
    
    if schedule and day in schedule and schedule[day]:
        current_schedule = ", ".join(schedule[day])
        text += f"`{current_schedule}`\n\n"
    else:
        text += "‚ùå _–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç._\n\n"
    
    text += "üìö *–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤* (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n\n"
    example_subjects = [
        "–ê–ª–≥–µ–±—Ä–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ë–∏–æ–ª–æ–≥–∏—è", "–í–ò–°", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò–ó–û", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ú—É–∑—ã–∫–∞", "–ú–•–ö", "–û–±—â–µ—Å—Ç–≤–æ",
        "–û–ë–ñ", "–†–û–í", "–†—É—Å—Å–∫–∏–π", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–§–∏–∑–∏–∫–∞", "–§–∏–∑-—Ä–∞", "–•–∏–º–∏—è", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
    ]

    for subject in example_subjects:
        text += f"`{subject}`\n"

    text += "\n‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:*"

    await callback.message.edit_text(text, parse_mode="Markdown")
    await state.set_state(ScheduleState.waiting_for_subject)
    await callback.answer()


@router.callback_query(F.data.startswith("date_"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    selected_date = callback.data.split("_")[1]
    current_state = await state.get_state()

    if current_state == HomeworkState.waiting_for_date:
        try:
            date_obj = datetime.strptime(selected_date, "%y %m %d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
        except ValueError:
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
            await callback.answer()
            return

        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        day_of_week = days[date_obj.weekday()]

        await state.update_data(date=selected_date)
        data = await state.get_data()
        user_class = data.get("user_class")
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=create_subject_keyboard(user_class, day=day_of_week)
        )
        await state.set_state(HomeworkState.waiting_for_subject)

    elif current_state == HomeworkState.waiting_for_view_date:
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT class, school FROM users WHERE user_id = ?", (callback.from_user.id,))
            user_data = cur.fetchone()
            if user_data:
                user_class, user_school = user_data 
                date_obj = datetime.strptime(selected_date, "%y %m %d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
                day_of_week = days[date_obj.weekday()]
                schedule = await get_schedule(user_class, user_school)
                if schedule and day_of_week in schedule:
                    subjects = schedule[day_of_week]
                else:
                    subjects = []
                cur.execute("SELECT subject, task FROM homework WHERE date = ? AND class = ? AND school = ?", 
                            (selected_date, user_class, user_school))
                homework_rows = cur.fetchall()
                text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {user_class} –Ω–∞ ({formatted_date}):\n"
                if subjects:
                    text += "\n".join([f"{i+1}. {subject}" for i, subject in enumerate(subjects)])
                else:
                    text += "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
                text += "\nüìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
                if homework_rows:
                    text += "\n".join([f"{row[0]}: {row[1]}" for row in homework_rows])
                else:
                    text += "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
                await callback.message.edit_text(text)
                await state.clear()
            else:
                await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ –∏ —à–∫–æ–ª–µ.")
    
    await callback.answer()

@router.callback_query(HomeworkState.waiting_for_date, F.data.startswith("date_"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    selected_date = callback.data.split("_")[1]
    date_obj = datetime.strptime(selected_date, "%y %m %d")
    formatted_date = date_obj.strftime("%d.%m.%Y")
    
    await state.update_data(date=formatted_date)
    data = await state.get_data()
    user_class = data.get("user_class")
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=create_subject_keyboard(user_class)
    )
    await state.set_state(HomeworkState.waiting_for_subject)
    await callback.answer()

@router.callback_query(F.data == "manual_date")
async def process_manual_date(callback: types.CallbackQuery):
    today = datetime.now().strftime("%y %m %d")
    await callback.message.edit_text(
        f"–°–µ–≥–æ–¥–Ω—è {today}.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú –î–î –∏–ª–∏ –ì–ì –ú–ú –î–î:"
    )

@router.message(HomeworkState.waiting_for_view_date, F.text.regexp(r"(\d{2} \d{2} \d{2})|(\d{2} \d{2})"))
async def process_manual_view_date_input(message: types.Message, state: FSMContext):
    try:
        input_date = message.text.strip()
        today = datetime.now()

        if len(input_date.split()) == 2:
            month, day = input_date.split()
            year = today.strftime("%y")
            input_date = f"{year} {month} {day}"

        datetime.strptime(input_date, "%y %m %d")

        data = await state.get_data()
        user_class = data.get("user_class")
        user_school = data.get("user_school")

        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT group_number FROM users WHERE user_id = ?", (message.from_user.id,))
            user_group = cur.fetchone()[0]
            
            date_obj = datetime.strptime(input_date, "%y %m %d")
            days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
            day_of_week = days[date_obj.weekday()]
            
            schedule = await get_schedule(user_class, user_school)
            if schedule and day_of_week in schedule:
                subjects = schedule[day_of_week]
            else:
                subjects = []
            
            cur.execute("SELECT subject, task FROM homework WHERE date = ? AND class = ? AND school = ? AND (group_number IS NULL OR group_number = ?)", 
                        (input_date, user_class, user_school, user_group))
            homework_rows = cur.fetchall()
        
        formatted_date = date_obj.strftime("%d.%m.%Y")
        
        text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {user_class} –Ω–∞ ({formatted_date}):\n"
        if subjects:
            text += "\n".join([f"{i+1}. {subject}" for i, subject in enumerate(subjects)])
        else:
            text += "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
        
        text += "\nüìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
        if homework_rows:
            text += "\n".join([f"{row[0]}: {row[1]}" for row in homework_rows])
        else:
            text += "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
        
        await message.answer(text)
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–ú –î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 04 15) –∏–ª–∏ –ì–ì –ú–ú –î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24 04 15).")


@router.callback_query(HomeworkState.waiting_for_subject, F.data == "all_subjects")
async def process_all_subjects(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_class = data.get("user_class")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:",
        reply_markup=create_subject_keyboard(user_class, include_all_subjects=False)
    )
    await callback.answer()

@router.callback_query(HomeworkState.waiting_for_subject, F.data.startswith("subject_"))
async def process_subject_selection(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split("_")[1]
    await state.update_data(subject=subject)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(HomeworkState.waiting_for_task)
    await callback.answer()

@router.message(ScheduleState.waiting_for_subject)
async def process_subject_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    day = data.get("day")
    user_class = data.get("user_class")
    user_school = data.get("user_school")
    user_id = message.from_user.id
    subjects = [subject.strip() for subject in message.text.split(",")]

    schedule = await get_schedule(user_class, user_school)
    if not schedule:
        schedule = {
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [],
            "–í—Ç–æ—Ä–Ω–∏–∫": [],
            "–°—Ä–µ–¥–∞": [],
            "–ß–µ—Ç–≤–µ—Ä–≥": [],
            "–ü—è—Ç–Ω–∏—Ü–∞": []
        }
    
    schedule[day] = subjects
    await update_schedule(user_id, user_class, user_school, schedule)
    await message.reply(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(subjects)}")
    await state.clear()

@router.callback_query(HomeworkState.waiting_for_subject, F.data == "new_subject")
async def process_new_subject(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(is_new_subject=True)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await state.set_state(HomeworkState.waiting_for_task)
    await callback.answer()

@router.message(HomeworkState.waiting_for_task)
async def process_task_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    date = data.get("date")
    user_class = data.get("user_class")
    user_school = data.get("user_school")
    subject = data.get("subject")
    task = message.text

    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT group_number FROM users WHERE user_id = ?", (message.from_user.id,))
        user_group = cur.fetchone()[0]
        
        cur.execute("INSERT INTO homework (user_id, date, class, school, subject, task, group_number) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (message.from_user.id, date, user_class, user_school, subject, task, user_group))
        conn.commit()

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {subject} –Ω–∞ {date} –¥–ª—è {user_class} ‚Äî {task}")
    await state.clear()

@router.message(ScheduleState.waiting_for_subject)
async def process_subject_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    day = data.get("day")
    user_class = data.get("user_class")
    subjects = message.text.split(",")

    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM schedule WHERE day = ? AND class = ?", (day, user_class))
        for subject in subjects:
            cur.execute("INSERT INTO schedule (user_id, class, day, subject) VALUES (?, ?, ?, ?)", (message.from_user.id, user_class, day, subject.strip()))
        conn.commit()
    
    await message.reply(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(subjects)}")
    await state.clear()


@router.callback_query(UserState.waiting_for_school, F.data.startswith("school_"))
async def process_school_selection(callback: types.CallbackQuery, state: FSMContext):
    school = callback.data.split("_")[1]
    
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT id FROM schools WHERE name = ?", (school,))
        result = cur.fetchone()
        
        if result:
            cur.execute("UPDATE users SET school = ? WHERE user_id = ?", (school, callback.from_user.id))
            conn.commit()
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å:", reply_markup=create_class_number_keyboard())
            await state.set_state(UserState.waiting_for_class_number)
        else:
            admin_chat_id = ADMIN_CHAT_ID
            await bot.send_message(
                admin_chat_id,
                f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —à–∫–æ–ª—ã:\n\n–®–∫–æ–ª–∞: {school}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_school_approval_keyboard(callback.from_user.id, school)
            )
            await callback.message.edit_text(f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∫–æ–ª—ã '{school}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
            await state.clear()
    await callback.answer()

@router.callback_query(UserState.waiting_for_school, F.data == "new_school")
async def process_new_school(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã –ø—Ä–∏–º–µ—Ä:\n¬´–®–∫–æ–ª–∞ ‚Ññ12¬ª.")
    await state.set_state(UserState.waiting_for_new_school)
    await callback.answer()

@router.message(UserState.waiting_for_new_school)
async def process_new_school_input(message: types.Message, state: FSMContext):
    school_name = message.text.strip()
    data = await state.get_data()
    user_class = data.get("user_class")
    admin_chat_id = ADMIN_CHAT_ID
    await bot.send_message(
        admin_chat_id,
        f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —à–∫–æ–ª—ã:\n\n–®–∫–æ–ª–∞: {school_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_school_approval_keyboard(message.from_user.id, school_name)
    )
    await message.answer(f"‚úÖ –®–∫–æ–ª–∞ ¬´{school_name}¬ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await state.clear()

@router.callback_query(F.data.startswith("approve_"))
async def process_school_approval(callback: types.CallbackQuery):
    _, user_id, school_name = callback.data.split("_")
    user_id = int(user_id)
    
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO schools (name) VALUES (?)", (school_name,))
        cur.execute("UPDATE users SET school = ?, username = ? WHERE user_id = ?", 
                    (school_name, callback.from_user.username, user_id))
        conn.commit()
    
    await callback.message.edit_text(f"‚úÖ –®–∫–æ–ª–∞ '{school_name}' –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å.")
    await bot.send_message(user_id, f"‚úÖ –®–∫–æ–ª–∞ ¬´{school_name}¬ª –æ–¥–æ–±—Ä–µ–Ω–∞!\n –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å. /start")
    await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def process_school_rejection(callback: types.CallbackQuery):
    _, user_id = callback.data.split("_")
    user_id = int(user_id)
    
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("UPDATE users SET role = 'ban' WHERE user_id = ?", (user_id,))
        conn.commit()
    
    await callback.message.edit_text(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —à–∫–æ–ª—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –∑–∞–±–∞–Ω–µ–Ω.")
    await bot.send_message(user_id, "‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —à–∫–æ–ª—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await callback.answer()

@router.callback_query(F.data == "skip_")
async def process_skip_request(callback: types.CallbackQuery):
    message_text = callback.message.text
    username = message_text.split("@")[1].split("\n")[0]
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª—ã –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
    )
    await callback.message.edit_text(
        f"–ó–∞—è–≤–∫–∞ –æ—Ç @{username} –ø—Ä–æ–ø—É—â–µ–Ω–∞.",
        reply_markup=None
    )
    await callback.answer()

@router.callback_query(F.data == "next_lesson")
async def process_next_lesson(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_class = data.get("user_class")
    user_school = data.get("user_school")
    today = datetime.now()
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    today_day = days[today.weekday()]
    schedule = await get_schedule(user_class, user_school)
    if not schedule or today_day not in schedule:
        await callback.answer("‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", show_alert=True)
        return

    subjects = schedule[today_day]
    builder = InlineKeyboardBuilder()
    for subject in subjects:
        builder.button(text=subject, callback_data=f"next_subject_{subject}")
    builder.adjust(2)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("next_subject_"))
async def process_next_subject(callback: types.CallbackQuery, state: FSMContext):
    subject = callback.data.split("_")[2]
    data = await state.get_data()
    user_class = data.get("user_class")
    user_school = data.get("user_school")
    today = datetime.now()
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    schedule = await get_schedule(user_class, user_school)
    if not schedule:
        await callback.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    for i in range(1, 8):
        next_day = today + timedelta(days=i)
        next_day_weekday = next_day.weekday()
        if next_day_weekday >= 5:
            continue

        next_day_name = days[next_day_weekday]
        if next_day_name in schedule and subject in schedule[next_day_name]:
            next_date = next_day.strftime("%y %m %d")
            await state.update_data(date=next_date, subject=subject)
            await callback.message.edit_text(f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ {subject} –±—É–¥–µ—Ç {next_day.strftime('%d.%m.%Y')}.\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
            await state.set_state(HomeworkState.waiting_for_task)
            await callback.answer()
            return
    await callback.answer("‚ùå –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@router.callback_query(HomeworkState.waiting_for_date, F.data == "next_lesson")
async def process_next_lesson(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_class = data.get("user_class")
    user_school = data.get("user_school")
    subject = data.get("subject")
    
    if not subject:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç.")
        return
   
    next_lesson_date = find_next_lesson_date(user_class, user_school, subject)
    
    if not next_lesson_date:
        await callback.answer("‚ùå –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await state.update_data(date=next_lesson_date)
    await callback.message.edit_text(f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ {subject} –±—É–¥–µ—Ç {next_lesson_date}. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(HomeworkState.waiting_for_task)
    await callback.answer()


@router.message(AdminPanelState.waiting_for_user_search)
async def process_user_search(message: types.Message, state: FSMContext):
    search_query = message.text.strip()
    
    try:
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            
            if search_query.isdigit():
                cur.execute("SELECT user_id, username, class, school, role, balance FROM users WHERE user_id = ?", (int(search_query),))
            else:
                cur.execute("SELECT user_id, username, class, school, role, balance FROM users WHERE user_id IN (SELECT user_id FROM users WHERE class LIKE ? OR school LIKE ? OR username LIKE ?)", 
                             (f"%{search_query}%", f"%{search_query}%", f"%{search_query}%"))
            
            users = cur.fetchall()
        
        if not users:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        if len(users) > 1:
            builder = InlineKeyboardBuilder()
            for user in users:
                user_id, username, user_class, user_school, role, balance = user
                builder.button(text=f"@{username} - {user_class} {user_school} ({role})", callback_data=f"admin_user_{user_id}")
            builder.adjust(1)
            await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ:", reply_markup=builder.as_markup())
        else:
            user_id, username, user_class, user_school, role, balance = users[0]
            await state.update_data(user_id=user_id)
            if role == "admin":
                await message.answer(
                    f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∞–¥–º–∏–Ω):\n\n"
                    f"üÜî ID: {user_id}\n"
                    f"üë§ Username: @{username}\n"
                    f"üè´ –®–∫–æ–ª–∞: {user_school}\n"
                    f"üéí –ö–ª–∞—Å—Å: {user_class}\n"
                    f"üë§ –†–æ–ª—å: {role}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n\n"
                    f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞."
                )
                await state.clear()
            else:
                await message.answer(
                    f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n"
                    f"üÜî ID: {user_id}\n"
                    f"üë§ Username: @{username}\n"
                    f"üè´ –®–∫–æ–ª–∞: {user_school}\n"
                    f"üéí –ö–ª–∞—Å—Å: {user_class}\n"
                    f"üë§ –†–æ–ª—å: {role}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=create_admin_user_actions_keyboard()
                )
                await state.set_state(AdminPanelState.waiting_for_user_action)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.callback_query(AdminPanelState.waiting_for_user_action, F.data.startswith("admin_"))
async def process_admin_action(callback: types.CallbackQuery, state: FSMContext):
    try:
        action = callback.data.split("_")[1]
        data = await state.get_data()
        user_id = data.get("user_id")
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
            user_role = cur.fetchone()[0]
        
        if user_role == "admin":
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞.")
            await state.clear()
            return
        
        if action == "changerole":
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=create_role_selection_keyboard())
            await state.set_state(AdminPanelState.waiting_for_role_change)
        elif action == "changebalance":
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:")
            await state.set_state(AdminPanelState.waiting_for_balance_change)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        await callback.answer()

@router.callback_query(AdminPanelState.waiting_for_role_change, F.data.startswith("role_"))
async def process_role_change(callback: types.CallbackQuery, state: FSMContext):
    try:
        role = callback.data.split("_")[1]
        data = await state.get_data()
        user_id = data.get("user_id")
        
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
            user_role = cur.fetchone()[0]
        
        if user_role == "admin":
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("UPDATE users SET role = ? WHERE user_id = ?", (role, user_id))
            conn.commit()
        
        await callback.message.edit_text(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role}.")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
    finally:
        await callback.answer()

@router.message(AdminPanelState.waiting_for_balance_change)
async def process_balance_change(message: types.Message, state: FSMContext):
    try:
        balance = int(message.text.strip())
        data = await state.get_data()
        user_id = data.get("user_id")
        
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
            user_role = cur.fetchone()[0]
        
        if user_role == "admin":
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (balance, user_id))
            conn.commit()
        
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {balance}.")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

@router.callback_query(F.data == "request_editor")
async def process_request_editor(callback: types.CallbackQuery):
    role = await check_user_role(callback.from_user.id)
    if role == "ban":
        await callback.answer("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", show_alert=True)
        return
    
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("SELECT class, school, editor_request FROM users WHERE user_id = ?", (callback.from_user.id,))
        result = cur.fetchone()
    
    if result:
        user_class, user_school, editor_request = result
        
        if editor_request:
            await callback.answer("‚ùå –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–æ–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.", show_alert=True)
            return

        with sqlite3.connect("homework.db") as conn:
            cur = conn.cursor()
            cur.execute("UPDATE users SET editor_request = TRUE WHERE user_id = ?", (callback.from_user.id,))
            conn.commit()
        
        await callback.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", show_alert=True)
    else:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –∏ —à–∫–æ–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.", show_alert=True)
    await callback.message.delete()

@router.callback_query(UserState.waiting_for_group, F.data.startswith("group_"))
async def process_group_selection(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data.split("_")[1]
    data = await state.get_data()
    user_class = data.get("user_class")
    school = data.get("school")
    
    with sqlite3.connect("homework.db") as conn:
        cur = conn.cursor()
        cur.execute("UPDATE users SET class = ?, group_number = ?, username = ? WHERE user_id = ?", 
                    (user_class, group, callback.from_user.username, callback.from_user.id))
        conn.commit()

    with sqlite3.connect("homework.db") as conn:        
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM schedule WHERE class = ? AND school = ?", (user_class, school))        
        schedule_count = cur.fetchone()[0]
    
    if schedule_count == 0:
        await callback.message.edit_text(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {user_class} –∏ –≥—Ä—É–ø–ø—É {group}."
            "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ: /editschedule."        
    	)
    else:        
        await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {user_class} –∏ –≥—Ä—É–ø–ø—É {group}.\n/start")
    await state.clear()
    await callback.answer()

async def set_bot_commands(bot: Bot):
    commands = [
	BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="addhw", description="–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É"),
        BotCommand(command="viewhw", description="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫—É"),
        BotCommand(command="editschedule", description="–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand(command="viewschedule", description="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand(command="menu", description="–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
        BotCommand(command="donate", description="–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"),
    ]
    await bot.set_my_commands(commands)

async def main():
    try:
        await set_bot_commands(bot)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == "__main__":
    asyncio.run(main())